apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "whereintheworld.fullname" . }}
  labels:
    {{- include "whereintheworld.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "whereintheworld.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "whereintheworld.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "whereintheworld.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      initContainers:
      - name: check-db-ready
        image: bitnami/postgresql:14.3.0-debian-11-r0
        {{- if .Values.postgresql.enabled }}
        command: ['sh', '-c',
          'until pg_isready -h {{ .Release.Name }}-{{ .Values.postgresql.nameOverride }} -p 5432 -d whereintheworld -U {{ .Values.postgresql.auth.username }};
          do echo waiting for database; sleep 2; done;']
        {{ else }}
        command: ['sh', '-c',
          'until pg_isready -h {{ .Values.externalPostgresql.host }} -p 5432 -d whereintheworld -U {{ .Values.externalPostgresql.auth.username }};
          do echo waiting for database; sleep 2; done;']
        {{ end }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            {{- if .Values.postgresql.enabled }}
            - name: DB_USER
              value: {{ .Values.postgresql.auth.username }}
            - name: DB_HOST
              value: {{ .Release.Name }}-{{ .Values.postgresql.nameOverride }}
            - name: DB_PASSWORD
              value: {{ .Values.postgresql.auth.password }}
            {{ else }}
            - name: DB_USER
              value: {{ .Values.externalPostgresql.auth.username }}
            - name: DB_HOST
              value: {{ .Values.externalPostgresql.host }}
            - name: DB_PASSWORD
              value: {{ .Values.externalPostgresql.auth.password }}
            {{- end }}
            - name: SOCIAL_AUTH_GOOGLE_OAUTH2_KEY
              value: {{ .Values.oauth2.key }}
            - name: SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET
              value: {{ .Values.oauth2.secret }}
            {{- if .Values.debug }}
            - name: DEBUG
              value: "1"
            {{- end }}
            - name: ALLOWED_HOSTS
              value: "{{ .Values.cors.hosts }}"
          ports:
            - name: http
              containerPort: 8000
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
